/*
 * Wazuh Vulnerability scanner - Scan Orchestrator
 * Copyright (C) 2015, Wazuh Inc.
 * Jan 22, 2024.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _FETCH_ALL_DATA_FROM_GLOBAL_DB_HPP
#define _FETCH_ALL_DATA_FROM_GLOBAL_DB_HPP

#include "chainOfResponsability.hpp"
#include "loggerHelper.h"
#include "scanContext.hpp"
#include "socketDBWrapper.hpp"
#include "vulnerabilityScanner.hpp"
#include "wazuhDBQueryBuilder.hpp"

/**
 * @brief Orchestrates queries over the global Wazuh system
 *
 * This class is responsible for managing the execution of queries within the global Wazuh environment.
 *
 * @tparam TScanContext scan context type.
 */
template<typename TScanContext = ScanContext>
class TFetchFromGlobalDB final : public AbstractHandler<std::shared_ptr<TScanContext>>
{
private:
    std::optional<SocketDBWrapper> m_wdbSocketWrapper {std::nullopt};

public:
    /**
     * @brief Construct a new global fetch object
     */
    explicit TFetchFromGlobalDB() {}

    /**
     * @brief Handles request and passes control to the next step of the chain.
     *
     * @param data Scan context.
     * @return std::shared_ptr<TScanContext> Abstract handler.
     */
    std::shared_ptr<TScanContext> handleRequest(std::shared_ptr<TScanContext> data) override
    {
        // Instance the socketWrapper for wazuhDb
        if (!m_wdbSocketWrapper)
        {
            try
            {
                m_wdbSocketWrapper.emplace(WDB_SOCKET);
            }
            catch (const std::exception& e)
            {
                logDebug2(WM_VULNSCAN_LOGTAG, "Error creating socketDBWrapper: %s", e.what());
            }
        }

        // Execute query
        nlohmann::json response;
        m_wdbSocketWrapper->query(WazuhDBQueryBuilder::builder().globalSelectCommand("id").build(), response);

        // Send response to suborchestration
        std::variant<const SyscollectorDeltas::Delta*,
                     const SyscollectorSynchronization::SyncMsg*,
                     std::shared_ptr<nlohmann::json>>
            variantData = std::make_shared<nlohmann::json>(response);

        return AbstractHandler<std::shared_ptr<TScanContext>>::handleRequest(std::move(data));
    }
};

using FetchFromGlobalDB = TFetchFromGlobalDB<>;

#endif // _FETCH_ALL_DATA_FROM_GLOBAL_DB_HPP
