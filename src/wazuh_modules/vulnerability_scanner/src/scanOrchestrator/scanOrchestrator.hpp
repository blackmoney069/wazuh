/*
 * Wazuh Vulnerability scanner - Scan Orchestrator
 * Copyright (C) 2015, Wazuh Inc.
 * March 25, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _SCAN_ORCHESTRATOR_HPP
#define _SCAN_ORCHESTRATOR_HPP

#include "factoryOrchestrator.hpp"
#include "flatbuffers/include/syscollector_deltas_generated.h"
#include "flatbuffers/include/syscollector_synchronization_generated.h"
#include "indexerConnector.hpp"
#include "logging_helper.h"
#include "scanContext.hpp"
#include <functional>
#include <memory>
#include <string>
#include <variant>
#include <vector>

constexpr auto INVENTORY_DB_PATH = "queue/vd/inventory";

/**
 * @brief ScanOrchestrator class.
 *
 */
template<typename TScanContext = ScanContext,
         typename TFactoryOrchestrator = FactoryOrchestrator,
         typename TOrchestrationNode = AbstractHandler<std::shared_ptr<TScanContext>>,
         typename TIndexerConnector = IndexerConnector,
         typename TDatabaseFeedManager = DatabaseFeedManager>
class TScanOrchestrator final
{
public:
    /**
     * @brief Class constructor.
     *
     * @param indexerConnector Indexer connector.
     * @param databaseFeedManager Database feed manager.
     * @param reportSocketClient Socket client to send vulnerability reports.
     * @param mutex Mutex to protect the access to the internal databases.
     */
    // LCOV_EXCL_START
    explicit TScanOrchestrator(
        std::shared_ptr<TIndexerConnector> indexerConnector,
        std::shared_ptr<TDatabaseFeedManager> databaseFeedManager,
        std::shared_ptr<SocketClient<Socket<OSPrimitives, NoHeaderProtocol>, EpollWrapper>> reportSocketClient,
        std::shared_mutex& mutex)
        : m_mutex {mutex}
    {
        m_inventoryDatabase = std::make_unique<Utils::RocksDBWrapper>(INVENTORY_DB_PATH);
        auto& inventoryDatabase = *m_inventoryDatabase;

        m_osOrchestration = TFactoryOrchestrator::create(
            ScannerType::Os, databaseFeedManager, indexerConnector, inventoryDatabase, reportSocketClient);
        m_packageInsertOrchestration = TFactoryOrchestrator::create(
            ScannerType::PackageInsert, databaseFeedManager, indexerConnector, inventoryDatabase, reportSocketClient);
        m_packageDeleteOrchestration = TFactoryOrchestrator::create(
            ScannerType::PackageDelete, databaseFeedManager, indexerConnector, inventoryDatabase, reportSocketClient);
        m_integrityClearOrchestration = TFactoryOrchestrator::create(
            ScannerType::IntegrityClear, databaseFeedManager, indexerConnector, inventoryDatabase, reportSocketClient);
        //  m_hotfixInsertOrchestration = TFactoryOrchestrator::create(ScannerType::HotfixInsert);
        //  m_hotfixDeleteOrchestration = TFactoryOrchestrator::create(ScannerType::HotfixDelete);
    }
    ~TScanOrchestrator() = default;
    // LCOV_EXCL_STOP

    /**
     * @brief Runs orchestrator, decoding and building context.
     *
     * @param data Variant with delta or sync message.
     */
    void run(std::variant<const SyscollectorDeltas::Delta*, const SyscollectorSynchronization::SyncMsg*, std::shared_ptr<nlohmann::json>>& data)
    {
        // The scan only reads the content
        std::shared_lock<std::shared_mutex> lock(m_mutex);
        // Decoder, build context with builder pattern.
        auto context = std::make_shared<TScanContext>(data);
        const auto type = context->getType();

        switch (type)
        {
            case ScannerType::PackageInsert: m_packageInsertOrchestration->handleRequest(std::move(context)); break;
            case ScannerType::PackageDelete: m_packageDeleteOrchestration->handleRequest(std::move(context)); break;
            case ScannerType::HotfixInsert: std::cout << "ScanOrchestrator::run::HotfixInserted" << std::endl; break;
            case ScannerType::HotfixDelete: std::cout << "ScanOrchestrator::run::HotfixDeleted" << std::endl; break;
            case ScannerType::Os: std::cout << "ScanOrchestrator::run::Os" << std::endl; break;
            case ScannerType::IntegrityClear: m_integrityClearOrchestration->handleRequest(std::move(context));
            default: break;
        }
    }

private:
    /**
     * @brief Indexer connector.
     *
     */

    std::unique_ptr<Utils::RocksDBWrapper> m_inventoryDatabase;
    std::shared_ptr<TOrchestrationNode> m_osOrchestration;
    std::shared_ptr<TOrchestrationNode> m_packageInsertOrchestration;
    std::shared_ptr<TOrchestrationNode> m_packageDeleteOrchestration;
    std::shared_ptr<TOrchestrationNode> m_hotfixInsertOrchestration;
    std::shared_ptr<TOrchestrationNode> m_hotfixDeleteOrchestration;
    std::shared_ptr<TOrchestrationNode> m_integrityClearOrchestration;
    std::shared_mutex& m_mutex;
};

using ScanOrchestrator = TScanOrchestrator<>;

#endif // _SCAN_ORCHESTRATOR_HPP
